Step 3
The next step is to target the paragraph element inside the .checkpoint-screen element.
Use document.querySelector and the child combinator > to target the paragraph element.
Assign that value to a const variable called checkpointMessage.

const checkpointMessage = document.querySelector('.checkpoint-screen > p');
--------------------------------------------

Step 9
In the game, the player will have the opportunity to cross different checkpoints. You will need to keep track of the status for the checkpoint collision detection.

Use let to create a new variable called isCheckpointCollisionDetectionActive and assign it the value of true.
let isCheckpointCollisionDetectionActive = true;
-----------------------------------------------------
Step 10
As you are designing the game, you will need to make sure that the size of the elements in the game are responsive and adapt to different screen sizes.

Start by creating an arrow function called proportionalSize that takes in a size parameter.
const proportionalSize = (size) => {}
---------------------------------------------------------
Step 11
The width and the height of the main player, platforms and checkpoints will be proportional sized relative to the innerHeight of the browser screen. The goal is to make the game responsive and visually consistent across different screen sizes.

Inside your proportionalSize function, you will need to return a ternary that checks if innerHeight is less than 500. If so, return Math.ceil((size / 500) * innerHeight), otherwise return size.
return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size
------------------------------------------------------------------------

Step 17
Below your velocity object, use the this keyword to set the width property to proportionalSize(40).

Below your width property, use the this keyword to set the height property to proportionalSize(40).

You are using the proportionalSize() function here to set the width and height properties of your class to be proportional to the height of the screen.
this.velocity = {
      x: 0,
      y: 0,
    };
    this.width = proportionalSize(40),
    this.height = proportionalSize(40)
    ----------------------------------------------------------------

Step 20
Below your ctx.fillStyle, you need to create the player's shape by calling the fillRect() method on the ctx object which you instantiated earlier.
Example Code
fillRect(x, y, width, height)
Inside the fillRect() method add the this.position.x, this.position.y, this.width and this.height values.

ctx.fillRect(this.position.x, this.position.y, this.width, this.height);
------------------------------------------------------------------------

Step 22
Inside the update() method, call the draw() method to ensure that the player is continually drawn on the screen as the game updates.

Don't forget to include the this keyword.
update() {
    this.draw()
  }
-------------------------------------------------------------------------

Step 25
Right now, when the player jumps up, it is possible for it to move past the height of the canvas.
To fix that, you will need to add a condition to stop the player from falling past the height of the canvas.
Create an empty if statement that checks if the sum of the player's y position, height, and y velocity is less than or equal to the height of the canvas.
------------------------------------------------------------------------








Step 101
The next step is to create a list of new checkpoint instances using the CheckPoint class.

Start by creating a new const variable called checkpoints and assign it checkpointPositions.map().

For the map callback function, pass in checkpoint for the parameter and implicitly return the creation of a new CheckPoint instance with the checkpoint.x, checkpoint.y and checkpoint.z values passed in as arguments.

const checkpoints = checkpointPositions.map(
	  (checkpoint) =>
	new CheckPoint(checkpoint.x, checkpoint.y, checkpoint.z)
);
---------------------------------------------------------------------------



